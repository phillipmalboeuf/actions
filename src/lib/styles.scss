:root {
	--foreground: #{$brown};
	--background: #{$beige};
	--foreground-inverse: #{$white};
	--background-inverse: #{$black};

	font-family: $text;
	color: var(--foreground);
	background-color: var(--background);
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;

	&:focus {
		// outline: 2px solid currentColor;
		outline: none;
	}
}

html {
	scroll-behavior: smooth;
	accent-color: $grey-dark;

	&.noscroll {
    overflow: hidden;
  }
}

body {
	font-size: $base;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @media (max-width: $mobile) {
    font-size: $mobile_base + 1px;
    line-height: $mobile_scale;
  }
}

h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3 {
	font-family: $display;
	font-weight: normal;
	white-space: pre-line;
}

h1,
.h1 {
	font-size: $base * $scale * 3;
	font-weight: 300;
}

h2,
.h2 {
	font-size: $base * $scale * 2;
	font-weight: 300;
}

h3,
.h3 {
	font-size: $base * $scale * 1.5;
	line-height: $scale;
	font-family: $text;
}

h4,
.h4 {
	font-size: $base * $scale * 1.5;
	line-height: $scale;
	font-family: $text;
}

h5,
.h5 {
	font-size: $base * $scale;
	line-height: $scale;
	font-family: $text;
}

h6,
.h6 {
	font-size: $base;
	font-family: $text;
	font-weight: 600;
	letter-spacing: 0.01em;
	line-height: 1.3;
}

p {
	line-height: 1.3;
	letter-spacing: 0.01em;
	white-space: pre-line;
}

small,
small p {
	font-size: $base - 4px;
	line-height: 1.25;
}

a {
	color: inherit;
	text-decoration: none;
}

a:hover {
	text-decoration: none;
}

strong {
	font-weight: 600;
}

em {
	> em {
		font-style: normal;
	}
}

sub,
sup {
	font-size: 0.666em;
}

input,
button {
	font-size: inherit;
	font-family: inherit;
}

button:focus:not(:focus-visible) {
	outline: none;
}

button,
.button {
	font-size: inherit;
	cursor: pointer;
	color: currentColor;
	display: inline-block;
	text-align: center;
	padding: ($gap * 0.5) ($gap * 1.5);
	border-radius: $gap;
	// background: transparent;
	// border: 1px solid;
	line-height: 1;
	border: 1.5px solid;
	background-color: transparent;

	@media (max-width: $mobile) {
		padding: ($mobile_gap * 0.5) ($mobile_gap * 1);
	}

	&:hover,
	&:focus {
		background-color: var(--color, $grey);
		border-color: transparent;
	}

	&.button--none {
		padding: 0;
		border: none;
		border-radius: 0;

		&:hover,
		&:focus {
			// color: var(--color, $grey);
			background-color: transparent;
		}
	}

	&.button--tight {
		// color: $white;
		padding: ($base * $scale * 0.25) ($base * $scale * 0.5);
		background-color: $beige-dark;
		border-color: transparent;
	}

	&.button--inverse {
		color: $white;
		background-color: $brown;
		border-color: $brown;
	}

	&.button--w_icon {
		display: flex;
		justify-content: space-between;
		padding-left: $base;

		&:after {
			content: "";
			display: block;
		}

		svg {
			height: 1em;
			width: auto;
			opacity: 0;
		}

		&:hover,
		&:focus {
			background-color: $grey;

			svg {
				opacity: 1;
			}
		}
	}
}

svg {
	path:not([stroke]),
	rect {
		fill: currentColor;
	}

	line {
		stroke: currentColor;
	} 
}

hr {
	color: currentColor;
	border: none;
	height: 1px;
	background-color: currentColor;
	margin: 0;
}

table {
	width: 100%;
	border-collapse: collapse;
	table-layout: fixed;

	td,
	th {
		vertical-align: top;
		text-align: left;
		white-space: pre-line;
		padding: ($base * 0.75) ($base) ($base * 0.75) 0;

		p:not(:last-child) {
			margin-bottom: $base;
		}
	}

	td {
		border: none;
		border-bottom: 1px solid;
	}

	tr, a {

		&:first-child {
			td {
				border-top: 1px solid;
			}
		}
	}
}

ul,
ol {
	padding-left: 1em;

	small & {
		padding-left: 1.5em;
	}

	&.list--nostyle {
		list-style: none;
		padding-left: 0;
	}
}

// ol:not(.list--nostyle) {
// 	li {
// 		position: relative;
// 		&:before {
// 			content: "";
// 			height: 0.5em;
// 			width: 0.5em;
// 			background-color: $beige;

// 			position: absolute;
// 			top: 0.8em;
// 			left: -0.8em;
// 		}
// 	}
// }

form {

	input[type="text"],
	input[type="email"],
	input[type="search"],
	input[type="number"],
	.dropdown,
	textarea,
	select {
		font-size: inherit;
		font-family: inherit;
		appearance: none;
		width: 100%;
		border: none;
		color: currentColor;
		background-color: $beige-dark;
		padding: $base;
		border-radius: $base - 2px;

		&::placeholder {
			color: currentColor;
		}

		&:not(:placeholder-shown),
		&:autofill {
			color: $brown;
			background-color: $white;
		}
	}

	input[type="search"] {
		border-radius: $base * 2;
	}

	label {
		cursor: pointer;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	select,
	.dropdown {
		padding: ($base * $scale * 0.5) $base;
		background-color: transparent;
		border: 1px solid;
		border-radius: $base * 1.5;

		// & + svg {
		// 	position: absolute;
		// 	top: 50%;
		// 	right: 0;
		// 	pointer-events: none;
		// 	transform: translate(-50%, -40%);
		// }
	}

	.dropdown {
		div {
			position: relative;
			z-index: 2;
			&::-webkit-scrollbar {
				display: none;
			}
		}
	}

	textarea {
		height: 8em;
		resize: none;
	}

	fieldset {
		border: none;
	}

	input[type="radio"],
	input[type="checkbox"] {
		cursor: pointer;
		appearance: none;
		width: auto;
		padding: ($base * 0.5) - 1px;

		color: currentColor;
		background-color: transparent;
		border: 1px solid;
		border-radius: 50%;

		&:checked {
			background-color: currentColor !important;
		}
	}

	input[type="range"] {
		width: 100%;
		cursor: pointer;
		-webkit-appearance: none;
		appearance: none;
		margin: ($base * 0.5) 0 ($base * 0.75);

		&::-webkit-slider-runnable-track {
			height: 1px;
			// border: 1px solid;
			background-color: currentColor;
			border-radius: $base;
		}

		&::-webkit-slider-thumb {
			-webkit-appearance: none;
			border: 1px solid;
			background-color: $beige;
			margin-top: ($base * -0.5);
			height: $base;
			width: $base;
			border-radius: 50%;
			box-shadow: none;
		}

		& + span {
			position: relative;
			left: var(--left);
			display: inline-block;
			transform: translateX(-50%);
			font-size: $base - 2px;
		}
	}
}

.ta-center {
	text-align: center;
}

.visually-hidden {
	border: 0;
	clip: rect(0 0 0 0);
	height: auto;
	margin: 0;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	white-space: nowrap;
}

[id] {
	scroll-margin-top: $base;
}

// #GRID

.flex {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  --gap: 0px;
  gap: var(--gap);

	&.flex--end {
		justify-content: flex-end;
	}

	&.flex--spaced {
		justify-content: space-between;
	}

	&.flex--middle {
		align-items: center;
	}

	&.flex--column {
		flex-direction: column;
	}

  &.flex--gapped {
    --gap: #{$base};

    @media (max-width: $mobile) {
      --gap: #{$base/2};
    }
  }

  &.flex--thick_gapped {
    --gap: #{$base*2};
  }

  &.flex--tight_gapped {
    --gap: #{$base/2};
    @media (max-width: $mobile) {
      --gap: #{$base/3};
    }
  }

  &.flex--tight_guttered_on_phone {
    @media (max-width: $mobile) {
      --gap: #{$base/3};
    }
  }
}

  .col {
    @for $i from 1 through $number_of_columns { 
      &.col--#{$i}of#{$number_of_columns} {
        $width: (100% / $number_of_columns * $i);
        $adjust: calc(var(--gap) / #{$number_of_columns / $i});
        width: calc(#{$width} - var(--gap) + #{$adjust});
       }

			@media (max-width: $tablet_portrait) {
				&.col--tablet--#{$i}of#{$number_of_columns} {
					$width: (100% / $number_of_columns * $i);
					$adjust: calc(var(--gap) / #{$number_of_columns / $i});
					width: calc(#{$width} - var(--gap) + #{$adjust});
				}
			}

			@media (max-width: $mobile) {
				&.col--mobile--#{$i}of#{$number_of_columns} {
					$width: (100% / $number_of_columns * $i);
					$adjust: calc(var(--gap) / #{$number_of_columns / $i});
					width: calc(#{$width} - var(--gap) + #{$adjust});
				}
			}
    }

    @for $i from 1 through 3 { 
      &.col--#{$i}of#{3} {
        $width: (100% / 3 * $i);
        $adjust: calc(var(--gap) / #{3 / $i});
        width: calc(#{$width} - var(--gap) + #{$adjust});
       }
    }
  }